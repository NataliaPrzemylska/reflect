cmake_minimum_required(VERSION 3.16)

# General configuration
if(NOT CMAKE_BUILD_TYPE)
  set(CMAKE_BUILD_TYPE Debug)
endif()

set_property(GLOBAL PROPERTY USE_FOLDERS ON)
set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/build/lib CACHE PATH "Where to place compiled static libraries.")
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/build/lib CACHE PATH "Where to place compiled shared libraries.")
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/build/bin CACHE PATH "Where to place compiled executables.")
set(BUILD_DIR "${CMAKE_CURRENT_SOURCE_DIR}/build")

# Project name
project(reflect)
set_property(DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR} PROPERTY VS_STARTUP_PROJECT reflect)
add_executable(reflect src/reflect_main.cpp)

set_target_properties(reflect PROPERTIES
    CXX_STANDARD 20
    CXX_STANDARD_REQUIRED YES
)
if(MSVC)
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /RTC1 /MDd")
endif() 

# Source setup
file(GLOB_RECURSE REFLECT_SOURCE 
    "src/*.h"
    "src/*.cpp"
)
target_sources(reflect PRIVATE ${REFLECT_SOURCE})
target_include_directories(reflect PUBLIC 
    ${CMAKE_CURRENT_SOURCE_DIR}/src
    ${CMAKE_CURRENT_SOURCE_DIR}/deps
)


# Settings specific configurations
include(reflect_settings.cmake)
if (${VLD_ENABLE} STREQUAL "y")
target_link_libraries(reflect PUBLIC "${VLD_PATH}/lib/Win64/vld.lib")
target_include_directories(reflect PUBLIC "${VLD_PATH}/include")
target_compile_definitions(reflect PUBLIC "VLD_ENABLE")
endif()
if (${NVTX_ENABLE} STREQUAL "y")
target_compile_definitions(reflect PUBLIC "NVTX_ENABLE")
include(reflect_util_scripts/reflect_nvtx_category_helper.cmake)
endif()
if (${VULKAN_DEBUG_UTILS_ENABLE} STREQUAL "n")
target_compile_definitions(reflect PUBLIC "RFCT_VULKAN_DEBUG_OFF")
endif()

# Dependencies setup
# vulkan
find_package(Vulkan QUIET)

if (NOT Vulkan_FOUND)
    if (DEFINED ENV{VULKAN_SDK})
        set(VULKAN_SDK $ENV{VULKAN_SDK})
        set(Vulkan_INCLUDE_DIR "${VULKAN_SDK}/Include")
        set(Vulkan_LIBRARY "${VULKAN_SDK}/Lib/vulkan-1.lib")

        include_directories(${Vulkan_INCLUDE_DIR})
        link_directories(${VULKAN_SDK}/Lib)

        message(STATUS "Using Vulkan SDK from: ${VULKAN_SDK}")
    else()
        message(FATAL_ERROR "Vulkan SDK not found! Please install Vulkan SDK or set the VULKAN_SDK environment variables.")
    endif()
else()
    message(STATUS "Vulkan found: ${Vulkan_INCLUDE_DIR}")

    include_directories(${Vulkan_INCLUDE_DIRS})
    link_directories(${Vulkan_LIBRARY_DIRS})
    target_link_libraries(reflect PUBLIC Vulkan::Vulkan)
endif()
# onetbb
add_subdirectory(deps/oneTBB)
target_include_directories(reflect PUBLIC deps/oneTBB/include)
target_link_libraries(reflect PUBLIC tbb)
# glfw
add_subdirectory(deps/glfw)
target_include_directories(reflect PUBLIC deps/glfw/include)
target_link_libraries(reflect PUBLIC glfw)



# precompiled headers
if(MSVC)
    target_compile_options(reflect PRIVATE /utf-8)
endif()
target_precompile_headers(reflect PRIVATE "src/utils/pch.h")

if(WIN32)
    target_compile_definitions(reflect PUBLIC "VK_USE_PLATFORM_WIN32_KHR")
endif()

set_property(DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR} PROPERTY VS_STARTUP_PROJECT reflect)
